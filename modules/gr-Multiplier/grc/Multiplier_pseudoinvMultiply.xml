<block>
  <name>pseudoinvMultiply</name>
  <key>pseudoinvMultiply</key>
  <category>[Multiplier]</category>
  <import>import Multiplier</import>
  <make>Multiplier.pseudoinvMultiply(
    Chips=$Chips,
    data=$data,
)</make>
  <callback>set_Chips($Chips)</callback>
  <callback>set_data($data)</callback>
  <param>
    <name>Chips</name>
    <key>Chips</key>
    <value>4</value>
    <type>raw</type>
  </param>
  <param>
    <name>Data Size</name>
    <key>data</key>
    <value>8</value>
    <type>raw</type>
  </param>
  <sink>
    <name>Data</name>
    <type>float</type>
    <vlen>1</vlen>
  </sink>
  <sink>
    <name>PN</name>
    <type>float</type>
    <vlen>1</vlen>
  </sink>
  <source>
    <name>out</name>
    <type>float</type>
    <vlen>1</vlen>
  </source>
  <doc>
    El algoritmo implementado describe la técnica para extraer el código de ensanchamiento de la señal recibida en un sistema DS-SS.
     M.C. Herrera
     Ingeniería Electrónica UNIQUINDIO
     2018

     parámetro:
     Data Size -> Tamaño de los datos
     Chips -> Tamaño de los chips

     Entrada:
     in0 -> Float

     Salida:
     float -> posee un tamaño fijo de 8192 muestras, señal desensanchada en DS-SS
   </doc>
</block>
